def uniform_cost_search(goal, start):
    global graph,cost
    answer = []
    queue = []
    for i in range(len(goal)):
        answer.append(10**8)
    queue.append([0, start])
    visited = {}
    count = 0
    while (queue):
        queue = sorted(queue)
        p=queue.pop()
        p[0] *= -1
        if (p[1] in goal):
            index = goal.index(p[1])
            if (answer[index] == 10**8):
                count += 1
            if (answer[index] > p[0]):
                answer[index] = p[0]
            queue.pop()
            queue = sorted(queue)
            if (count == len(goal )):
                return answer

        if (p[1] not in visited):
            for i in range(len(graph[p[1]])):
                queue.append( [(p[0] + cost[(p[1], graph[p[1]][i])])* -1, graph[p[1]][i]])
        visited[p[1]] = 1
    return answer

if __name__ == '__main__':
    print("enter the no of vertices")
    n=int(input())
#     n=5
#     graph,cost = [[] for i in range(n)],{}
#     graph[0].append(1)
#     graph[0].append(2)
#     graph[1].append(4)
#     graph[2].append(3)
#     graph[3].append(4)

    while(1):
        print("you want to take input types y or n")
        x=input().lower()
        if(x=='y'):
            print("enter edge with seperated space")
            a,b=map(int,input().split())
            graph[a].append(b)
            print("enter cost for edge ",a,b)
            c=int(input())
            cost[(a,b)]=c
        else:
            break
#     cost[(0, 1)] = 99
#     cost[(0, 2)] = 80
#     cost[(1, 4)] = 211
#     cost[(2, 3)] = 97
#     cost[(3, 4)] = 101

    goal = []
    print("enter the goal node")
    g=int(input())
#     g=4
    goal.append(g)
    answer = uniform_cost_search(goal, 0)
    print("Minimum cost from 0 to ",g," is = ",answer[0])

